" vimrc.fork {
" vim: set sw=4 ts=4 sts=4 et tw=78 foldmarker={,} foldlevel=0 foldmethod=marker nospell:
" }

" General {

    " Helpers {

        function! CmdLine(str)
            exe "menu Foo.Bar :" . a:str
            emenu Foo.Bar
            unmenu Foo
        endfunction

        function! VisualSelection(direction) range
            let l:saved_reg = @"
            execute "normal! vgvy"

            let l:pattern = escape(@", '\\/.*$^~[]')
            let l:pattern = substitute(l:pattern, "\n$", "", "")

            if a:direction == 'b'
                execute "normal ?" . l:pattern . "^M"
            elseif a:direction == 'gv'
                call CmdLine("vimgrep " . '/'. l:pattern . '/' . ' **/*.')
            elseif a:direction == 'replace'
                call CmdLine("%s" . '/'. l:pattern . '/')
            elseif a:direction == 'f'
                execute "normal /" . l:pattern . "^M"
            endif

            let @/ = l:pattern
            let @" = l:saved_reg
        endfunction

    " }

    " Disable some keys {
        map <up> <nop>
        map <down> <nop>
        map <left> <nop>
        map <right> <nop>
        imap <up> <nop>
        imap <down> <nop>
        imap <left> <nop>
        imap <right> <nop>
        nnoremap Q <nop>
    " }

    " Appearance {
        colorscheme monokai
        set shortmess=I
    " }

    " General {
        set clipboard=
        set sidescrolloff=15
        set sidescroll=1
        set scrolljump=1
        set scrolloff=5
        set cmdheight=2
        set mouse=""
        set showbreak=â†ª
        set noerrorbells
        set novisualbell
        set ffs=unix,dos,mac
        set nospell
        nmap <leader>w :w!<CR>

        " set foldmethod=syntax
        " set foldlevelstart=1
        " set foldnestmax=3
        " set foldenable
        set smarttab
        set si
        noremap <C-f> :Ack<space>

        " Visual mode pressing * or # searches for the current selection
        " Super useful! From an idea by Michael Naumann
        vnoremap <silent> * :call VisualSelection('f')<CR>
        vnoremap <silent> # :call VisualSelection('b')<CR>

        " Disable highlight when <leader><CR> is pressed
        map <silent> <leader><CR> :noh<CR>

        " Close the current buffer
        map <leader>bd :Bclose<CR>
        " Close all the buffers
        map <leader>ba :1,1000 bd!<CR>

        " Switch CWD to the directory of the open buffer
        map <leader>cd :cd %:p:h<CR>:pwd<CR>

        " When you press gv you vimgrep after the selected text
        vnoremap <silent> gv :call VisualSelection('gv')<CR>

        " When you press <leader>r you can search and replace the selected text
        vnoremap <silent> <leader>r :call VisualSelection('replace')<CR>

        " Pressing ,ss will toggle and untoggle spell checking
        map <leader>ss :setlocal spell!<CR>

        " Quickly open a buffer for scripbble
        map <leader>q :e ~/buffer<CR>

        " Comment out/in
        nmap <C-c> :Commentary<CR>
        imap <C-c> <Esc>:Commentary<CR><<i
        vmap <C-c> :Commentary<CR>

        " Paste
        vmap <leader>y "+y
        vmap <leader>d "+d
        nmap <leader>p "+p
        nmap <leader>P "+P
        vmap <leader>p "+p
        vmap <leader>P "+P

    " }

" }

" Completion {
        set completeopt=longest,menuone
        inoremap <expr> <CR> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"
        inoremap <expr> <C-n> pumvisible() ? '<C-n>' : '<C-n><C-r>=pumvisible() ? "\<lt>Down>" : ""<CR>'
        " open omni completion menu closing previous if open and opening new menu without changing the text
        inoremap <expr> <C-Space> (pumvisible() ? (col('.') > 1 ? '<Esc>i<Right>' : '<Esc>i') : '') .
                    \ '<C-x><C-o><C-r>=pumvisible() ? "\<lt>C-n>\<lt>C-p>\<lt>Down>" : ""<CR>'
        " open user completion menu closing previous if open and opening new menu without changing the text
        inoremap <expr> <S-Space> (pumvisible() ? (col('.') > 1 ? '<Esc>i<Right>' : '<Esc>i') : '') .
                    \ '<C-x><C-u><C-r>=pumvisible() ? "\<lt>C-n>\<lt>C-p>\<lt>Down>" : ""<CR>'
" }

" Statusline {
    set laststatus=2
    let g:airline_theme='monokai'
    let g:airline#extensions#tmuxline#enabled = 0
    let g:airline#extensions#tabline#enabled = 1
    let g:airline#extensions#tabline#show_buffers = 0
    let g:airline#extensions#tabline#left_sep = ' '
    let g:airline#extensions#tabline#left_alt_sep = '|'
    let g:airline#extensions#tabline#show_tab_nr = 0
    let g:airline#extensions#tabline#show_tab_type = 0
    let g:airline#extensions#tabline#show_close_button = 0
    let g:airline#extensions#bufferline#enabled = 0
" }

" CtrlP {
    let g:ctrlp_use_caching=0
    let g:ctrlp_clear_cache_on_exit = 0
    let g:ctrlp_working_path_mode = 'ra'
    nnoremap <leader>o :CtrlP<CR>
" }

" Windows, Panes, Tabs and Splits {

    " Switch Window
    noremap <silent> w call system('tmux select-window -t :+')

    " Switch Pane
    noremap <silent> p call system('tmux select-pane -t :.+')

    " Switch Tab
    noremap t gt
    " Switch Split
    noremap s <C-w><C-w>
" }

" NERDTree {
    let NERDTreeIgnore=['\.py[cd]$', '\~$', '\.swo$', '\.swp$', '^\.git$', '^\.hg$', '^\.svn$', '\.bzr$', '\.idea$', '__pycache__', '.ropeproject', '.vagrant']
    map <leader>n <plug>NERDTreeTabsToggle<CR>
    let g:NERDTreeMinimalUI=1
    let g:NERDTreeWinSize=26
    let g:NERDTreeMapActivateNode="za"
    map <F2> :NERDTreeToggle<CR>
" }

" Syntastic {
    let g:syntastic_check_on_open=0
    let g:syntastic_error_symbol = "âœ—"
    let g:syntastic_warning_symbol = "âš "
    nnoremap <leader>l :SyntasticCheck<CR>
" }

" Pymode {
    let g:pymode = 1
    let g:pymode_indent = 1
    let g:pymode_options = 1
    let g:pymode_options_max_line_length = 79
    let g:pymode_options_colorcolumn = 1
    let g:pymode_folding = 1
    let g:pymode_virtualenv = 1
    let g:pymode_utils_whitespaces = 0
    let g:pymode_doc = 0
    let g:pymode_rope = 0
    let g:pymode_lint = 0
    let g:pymode_syntax = 1
    let g:pymode_syntax_builtin_objs = 1
    let g:pymode_syntax_builtin_funcs = 1
    let g:pymode_syntax_highlight_self = 1
    let g:pymode_breakpoint = 1
    let g:pymode_breakpoint_bind = '<leader>b'
" }

" Jedi {
    if !exists('g:neocomplcache_force_omni_patterns')
        let g:neocomplcache_force_omni_patterns = {}
    endif
    if !exists('g:neocomplcache_omni_patterns')
        let g:neocomplcache_omni_patterns = {}
    endif
    if !exists('g:neocomplcache_omni_functions')
        let g:neocomplcache_omni_functions = {}
    endif

    let g:neocomplcache_omni_patterns.python = '[^. \t]\.\w*'
    let g:neocomplcache_force_omni_patterns.python = '[^. \t]\.\w*'
    let g:neocomplcache_omni_functions.python = 'jedi#completions'

    let g:jedi#popup_on_dot = 0
    let g:jedi#auto_vim_configuration = 0
    let g:jedi#completions_enabled = 1
    let g:jedi#popup_select_first = 0
    " let g:jedi#goto_assignments_command="<leader>g"
    " let g:jedi#goto_definitions_command="<leader>d"
    " let g:jedi#documentation_command="K"
    " let g:jedi#usages_command="<leader>n"
    " let g:jedi#completions_command="<C-Space>"
    " let g:jedi#rename_command="<leader>r"
    " let g:jedi#show_call_signatures="1"
    " autocmd FileType python setlocal completeopt-=preview
" }

" Local Vimrc {
    let g:localvimrc_whitelist='/home/pricco/sophilabs/.*'
    let g:localvimrc_sandbox=0
" }

" Indent Guides {
    let g:indent_guides_default_mapping=0
    let g:indent_guides_auto_colors = 0
    let g:indent_guides_exclude_filetypes=['help', 'nerdtree']
    nmap <silent> <Leader>ig <Plug>IndentGuidesToggle
" }

" EasyMotion {
    let g:EasyMotion_do_mapping=0
    let g:EasyMotion_smartcase=1
    nmap s <Plug>(easymotion-s2)
    nmap t <Plug>(easymotion-t2)
    map <Leader>j <Plug>(easymotion-j)
    map <Leader>k <Plug>(easymotion-k)
" }

" Multiple Cursors {
    let g:multi_cursor_next_key='<C-n>'
    let g:multi_cursor_prev_key='<C-p>'
    let g:multi_cursor_skip_key='<C-x>'
    let g:multi_cursor_quit_key='<Esc>'
    let g:multi_cursor_start_key='<C-n>'
" }

" Tagbar {
    let g:tagbar_compact=1
    let g:tagbar_autofocus=1
" }

" Snippets {
    let g:snips_author = 'Pablo Ricco <pricco@gmail.com>'
" }

" Signify {
    let g:signify_sign_add = '+'
    let g:signify_sign_delete_first_line = '-'
    let g:signify_sign_change = '!'
    let g:signify_sign_changedelete = '!'
    let g:signify_sign_show_count = 0
" }

" Tmuxline {
    let g:tmuxline_theme = 'monokai'
    let g:tmuxline_preset = {
          \ 'a'    : '#S',
          \ 'win'  : '#W',
          \ 'cwin' : '#W',
          \ 'x'    : '#{battery_icon} #{battery_percentage}',
          \ 'y'    : '%y/%m/%d %H:%M',
          \ 'z'    : '#H '
          \ }
" }
